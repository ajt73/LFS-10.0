#!/bin/bash
#
# © Anthony Taylor 2020-21
#
# Linux From Scratch (LFS)
# Installation Tool and Package Manager
# Based on Version 10
# Linux From Scratch is Copyright © 1999-2021, Gerard Beekmans
# http://www.linuxfromscratch.org/
#
#set -x
set -eo pipefail

version=0.2.5

# Colours
DEFAULT="\e[39m"
RED="\e[31m"
GREEN="\e[32m"
ORANGE="\e[33m"
BLUE="\e[34m"
CYAN="\e[36m"

setup() {
  # Stage?? buildscripts are used during the initial installation of LFS
  # The LFS variable must be set
  case ${1} in
    stage1*|cross-*|temp-*)
      LFS=/mnt/lfs
      rootdir=$LFS
      ;;
    *)
      rootdir=""
      ;;
  esac

  usr=${rootdir}/usr
  etc=${rootdir}/etc
  var=${rootdir}/var
  
  srcdir=${usr}/src
  buildscripts=${srcdir}/buildscripts
  pkgdir=${srcdir}/pkg
  logdir=${var}/log/lfs
  lfsconfig=${etc}/lfs/lfs.config
  install_log=${etc}/lfs/lfs.install
  if [[ -f ${lfsconfig} ]]; then
    source ${lfsconfig}
    SBUref=$(grep SBU= ${lfsconfig})
    SBUref=${SBUref#*=}
  fi
}

checkbuildfile() {
  buildfile=$(find ${buildscripts} -type f -name "${1}*" | sort -V | tail -n 1)
  if [ -f "${buildfile:-}" ]; then
    if [ $(grep -c ${1} ${install_log}) -gt 0 ]; then
      echo "${1} already installed"
      exit 0
    else
      source ${buildfile}
    fi
  else
    echo "Error: Buildfile ${1} not found"
    exit 1
  fi
}

src_fetch() {
  if [[ ! -f ${srcdir}/${tarball} ]]; then
    printf "Downloading $GREEN$tarball $DEFAULT\n"
    if [[ -z $nocheck ]]; then
      wget -q ${URL}
    else
      wget -q ${URL} --no-check-certificate
      nocheck=""
    fi
  fi
  if [[ -n $MD5 ]]; then
    md5=$(md5sum ${tarball})
    if [ ${md5%% *} != ${MD5} ]; then
      echo "Error: Bad checksum for ${tarball}"
      exit 1
    fi
  fi
}

src_unpack() {
#  echo -e "Unpacking $GREEN$PKG-$VER $DEFAULT"
  # Identify the unpacked folder name
  builddir=$(tar '--exclude=*/*/*' -tf ${tarball} | tail -n 1)
  builddir=${builddir%%/*}
  rm -rf ${builddir}
  # Unpack the source 
  tar -xf ${tarball}
  cd ${builddir}
}

src_patch() {
  p=0
  for srcpatch in ${PATCH[@]}; do
    srcpatch=${srcpatch##*/}
    if [[ ! -f ${srcdir}/${srcpatch} ]]; then
      echo -e "Downloading $GREEN$srcpatch $DEFAULT"
      wget -q ${srcpatch}
    fi
    if [[ ! -z ${PATCHMD5[p]} ]]; then
      md5=$(md5sum ${srcdir}/${srcpatch})
      if [ ${md5%% *} != ${PATCHMD5[p]} ]; then
        echo "Error: Bad checksum for ${srcpatch}"
        exit 1
      fi
    fi
    patch -Np1 -i ${srcdir}/${srcpatch} >> ${buildlog} 2>&1
    ((p=p+1))
  done
  unset p
}

src_configure() {
  echo -e "Configuring $GREEN$PKG-$VER $DEFAULT"
  ./configure ${conf_opts} >> ${buildlog} 2>&1
}

src_make() {
  echo -e "Compiling   $GREEN$PKG-$VER $DEFAULT"
  make ${make_opts} >> ${buildlog} 2>&1
}

src_check() {
  src_test check
}

src_test() {
  echo -e "Testing     $GREEN$PKG-$VER $DEFAULT"
  # Allow both make test and make check
  testcommand=${1}
  if [ -z ${testcommand} ]; then testcommand="test"; fi
  make ${testcommand} > ${buildlog}-test 2>&1 
}

src_install() {
  echo -e "Installing  $GREEN$PKG-$VER $DEFAULT"
  make install ${inst_opts} >> ${buildlog} 2>&1
}

pkg_install() {
  # If buildfile uses a non-standard DESTDIR location, it is responsible
  # for the final installation. Should only be used during initial bootstrap
  if [[ ${inst_opts} == *"DESTDIR=$installdir"* ]]; then
    # Create package archive
    echo -e "Packaging   $GREEN$PKG-$VER $DEFAULT"
    pushd ${installdir} > /dev/null
    if [[ -f ${pkgdir}/${builddir}.tar.xz ]]; then 
      rm -f ${pkgdir}/${builddir}.tar.xz
    fi
    tar -cJpf ${pkgdir}/${builddir}.tar.xz *
    popd > /dev/null
    echo -e "Deploying   $GREEN$PKG-$VER $DEFAULT"
    # Unpack the package into the root directory 
    pushd / > /dev/null
    tar xf ${pkgdir}/${builddir}.tar.xz
    popd > /dev/null
  fi
}

__help() {
  echo "Linux From Scratch package manager"
  echo
  echo "Options"
  echo -e "$ORANGE-b {pkg} : Build package archive$DEFAULT"
  echo "-d {pkg} : Download package tarball"
  echo "-D {pkg} : Download package tarball using https (Unsecure)"
  echo "-h       : Show help (this page)"
  echo -e "$ORANGE-i {pkg} : Install pre-built package archive$DEFAULT"
  echo "-s       : Synchronise the local buildfiles with the master buildfiles"
  echo "-v       : Show the version number"
  echo "{pkg}    : Build and install package"
  # Orange options not yet implemented
}

##############
#            #
# Start Here #
#            #
##############

case "${1}" in
  ""|-h)  # Help
    __help
  ;;
  -d|-D)  # Download tarball
    setup ${1}
    if [[ $1 == "-D" ]]; then nocheck=1; fi
    if [[ ${URL} != "" ]]; then
      src_fetch
    else
      echo "Nothing to download"
    fi
  ;;
  -s)     # Synchronise
    MASTER="/media/user/011b7a68-5f77-4744-8a84-9023eea502ad/LFS-10.0"
    LFS=/mnt/lfs
    mkdir -p $LFS/usr/src/{buildscripts,pkg}
    cp -rup ${MASTER}/src/* -t $LFS/usr/src
    for file in $(find ${MASTER}/lfs/ -type f); do
      filename=${file##*${MASTER}/lfs/}
      if [ ${filename} = "lfsbuild" ]; then
        if [ ${file} -nt $LFS/usr/bin/${filename} ]; then
          cp ${file} $LFS/usr/bin/          
          chown root:root $LFS/usr/bin/lfsbuild
          $LFS/usr/bin/lfsbuild -v
        fi
      elif [ ${file} -nt $LFS/usr/src/buildscripts/${filename} ]; then
        echo ${filename}
        filepath=$LFS/usr/src/buildscripts/${filename%%/*}
        if [[ ! -d ${filepath} ]]; then mkdir -p ${filepath}; fi
        cp ${file} ${filepath}
      fi
    done
    chown -R root:root $LFS/usr/src
  ;;
  -v)     # Version
    echo "lfsbuild-$version"
  ;;
  *)      # Build and install
    setup ${1}
    checkbuildfile ${1}
    if [[ ! -z ${SBU} ]]; then
      P=${buildfile##*/}
      P=${P%.*}
      printf "Building $GREEN${P} $DEFAULT\n"
      # Check for bc to allow calculation of build time
      if [[ $(bc -v 2>/dev/null) ]]; then
        buildsec=00$(bc <<< "scale=0;${SBUref}*${SBU}%60/1")
        buildmin=00$(bc <<< ${SBUref}*${SBU}/60)
        buildtime="${buildmin:(-2)}:${buildsec:(-2)}"
        printf "Estimated Build Time: $CYAN${buildtime} $DEFAULT\n"
      fi
    fi
    if [ -n ${REQUIRE} ]; then
    # Resolve dependancies
      for dep in ${REQUIRE[@]}; do
        lfsbuild ${dep}
      done
    fi
    if [[ -n ${PKG} ]]; then  # meta packages do not define PKG
      tarball=${URL##*/}
      src_fetch
      if [[ -z ${srconly} ]]; then exit 0; fi
      pushd ${srcdir} > /dev/null
      buildlog=${logdir}/${PKG}-${VER}
      if [ -f ${buildlog} ]; then rm ${buildlog}; fi
      date > ${buildlog}     # Log the long date
      date +%s >> ${buildlog} # Log the date as seconds
      if [[ ${tarball} != "" ]]; then src_unpack; fi
      if [[ $(declare -F __prepare) ]]; then __prepare; fi
      if [[ $(declare -F __configure) ]]; then __configure; fi
      if [[ $(declare -F __make) ]]; then __make; fi
      if [[ $(declare -F __test) ]]; then __test; fi
      if [[ $(declare -F __install) ]]; then
        installdir="$(pwd)/fakeinstall"
        if [[ -d ${installdir} ]]; then rm -rf ${installdir}; fi
        mkdir ${installdir}
        inst_opts="DESTDIR=$installdir"
        __install
        pkg_install
      fi
      if [[ $(declare -F __postconfig) ]]; then __postconfig; fi
      echo $(($(date +%s)-$(awk NR==2 ${buildlog}))) >> ${buildlog}
      popd > /dev/null
      rm -rf ${srcdir}/${builddir}
    fi
    echo "${1} : $(date +'%d %B %Y')" >> ${install_log}
  ;;
esac